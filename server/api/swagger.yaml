basePath: /api/v1
definitions:
  ProblemDetails:
    properties:
      detail:
        type: string
      instance:
        type: string
      status:
        type: integer
      title:
        type: string
      type:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
      remember_me:
        type: boolean
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      user:
        $ref: '#/definitions/dto.UserDetails'
    required:
    - user
    type: object
  dto.LogoutResponse:
    properties:
      redirect_url:
        type: string
      success:
        type: boolean
    type: object
  dto.RegistrationRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.RegistrationResponse:
    properties:
      user:
        $ref: '#/definitions/dto.UserDetails'
    required:
    - user
    type: object
  dto.ServerConfig:
    type: object
  dto.ServerInfo:
    properties:
      version:
        type: string
    type: object
  dto.UserDetails:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  model.User:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: API for the messanger of the future - What-it-doo.
  title: What-it-doo API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password
      operationId: login
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
      summary: Authenticate user
      tags:
      - Authentication
  /auth/logout:
    post:
      description: Logout the authenticated user
      operationId: logout
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LogoutResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
      summary: Logout user
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with credentials
      operationId: register
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegistrationRequest'
      - description: Automatically log in the user after registration
        in: query
        name: autoLogin
        type: boolean
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegistrationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ProblemDetails'
      summary: Register user
      tags:
      - Authentication
  /server/about:
    get:
      description: Get information about the server
      operationId: getServerInfo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ServerInfo'
      summary: Get server information
      tags:
      - Server
  /server/config:
    get:
      description: Get server configuration
      operationId: getServerConfig
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ServerConfig'
      summary: Get server configuration
      tags:
      - Server
  /users/me:
    get:
      description: Get details of the currently authenticated user
      operationId: getMyself
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Get current user
      tags:
      - users
swagger: "2.0"
